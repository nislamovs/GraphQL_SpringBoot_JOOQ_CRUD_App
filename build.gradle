plugins {
	id 'application'
	id 'org.springframework.boot' version '2.4.2'
	id "io.freefair.lombok" version "4.1.6"
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'

	id 'org.flywaydb.flyway' version '6.5.6'
	id 'nu.studer.jooq' version '5.2'

	id 'com.palantir.docker' version '0.26.0'
	id 'com.palantir.docker-run' version '0.26.0'
}

group = 'com.city'
version = '1.0.0'
sourceCompatibility = '11'

configurations {
	flywayMigration
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	jcenter()
}

mainClassName = 'CarsApplication'

jooq {
	version = '3.14.7'  // the default (can be omitted)
	edition = nu.studer.gradle.jooq.JooqEdition.OSS  // the default (can be omitted)
}

flyway {
	configurations = ['flywayMigration']
	url = 'jdbc:h2:~/test;AUTO_SERVER=TRUE'
	user = 'sa'
	password = ''
}

jooq {
	configurations {
		main {
			generationTool {
				logging = org.jooq.meta.jaxb.Logging.WARN
				jdbc {
					driver = 'org.h2.Driver'
					url = flyway.url
					user = flyway.user
					password = flyway.password
				}
				generator {
					name = 'org.jooq.codegen.DefaultGenerator'
					database {
						name = 'org.jooq.meta.h2.H2Database'
						includes = '.*'
						excludes = ''
					}
					target {
						packageName = 'nu.studer.sample'
					}
				}
			}
		}
	}
}

apply plugin: "com.palantir.docker"
apply plugin: "com.palantir.docker-run"

dependencies {
	flywayMigration 'com.h2database:h2:1.4.200'
	jooqGenerator 'com.h2database:h2:1.4.200'


	implementation        "org.springframework.boot:spring-boot-starter-actuator"
	implementation 'org.springframework.boot:spring-boot-starter-jooq'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-core'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
	useJUnitPlatform()
}

bootJar {
	archiveBaseName = 'cars'
	archiveVersion =  '1.0.0'
}

task unpack(type: Copy) {
	dependsOn bootJar
	from(zipTree("build/libs/cars-1.0.0.jar"))
	into("build/dependency")
}

docker {
	name "cars"
	copySpec.from(tasks.unpack.outputs).into("dependency")
	buildArgs(['DEPENDENCY': "dependency"])
}

dockerRun {
	name  "cars"
	image "cars-1.0.0"
	ports '8080:8080'
	clean true
}


// configure jOOQ task such that it only executes when something has changed that potentially affects the generated JOOQ sources
// - the jOOQ configuration has changed (Jdbc, Generator, Strategy, etc.)
// - the classpath used to execute the jOOQ generation tool has changed (jOOQ library, database driver, strategy classes, etc.)
// - the schema files from which the schema is generated and which is used by jOOQ to generate the sources have changed (scripts added, modified, etc.)
tasks.named('generateJooq').configure {
	// ensure database schema has been prepared by Flyway before generating the jOOQ sources
	dependsOn tasks.named('flywayMigrate')

	// declare Flyway migration scripts as inputs on the jOOQ task
	inputs.files(fileTree('src/main/resources/db/migration'))
			.withPropertyName('migrations')
			.withPathSensitivity(PathSensitivity.RELATIVE)

	// make jOOQ task participate in incremental builds and build caching
	allInputsDeclared = true
	outputs.cacheIf { true }
}